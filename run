#! /usr/bin/env node
const challenges = require('./sets');
const program = require('commander');
const colors = require('colors');

async function runOne(n) {
  let retVal;

  try {
    if (!challenges[n]) {
      throw new Error(`Failed to run ${n}. Missing sets/*/${n}.js.`);
    }

    console.log(colors.bold(`*** Challenge ${n} ***`));
    if (challenges[n].describe) console.log(challenges[n].describe);

    retVal = await challenges[n].run();
    if (typeof retVal !== 'undefined') {
      console.log(colors.green('Return Value:'), retVal);
    }
  } catch (e) {
    if (e.message) {
      console.log(colors.bgRed('Failure:'), e.stack);
    } else {
      console.log(colors.bgRed('Error: Exception with no `.message`. Please throw Error objects.'));
      console.log(e);
    }
  }
  return retVal;
}

async function runAll() {
  // eslint-disable-next-line no-restricted-syntax
  for (const challenge of Object.keys(challenges)) {
    if (challenge === '19') {
      console.log('Skipping 19 because it is interactive.');
    } else {
      await runOne(challenge);
    }
  }
}

program
  .version('0.0.1')
  .option('-s --single [n]', 'The individual challenge to run.', parseInt)
  .parse(process.argv);

const challengeNumber = program.single;
if (!challengeNumber) runAll().then(process.exit);
else runOne(challengeNumber).then(process.exit);
